{"version":3,"sources":["webpack:///./src/components/time-spent.tsx","webpack:///./src/components/movie-range-selector.tsx","webpack:///./src/components/movie-length.tsx","webpack:///./src/components/values-and-counts-list.tsx","webpack:///./src/components/list.tsx","webpack:///./src/components/footer.tsx","webpack:///./src/templates/movie-range-data.tsx","webpack:///./src/components/info-card.tsx"],"names":["isoDate","date","dayMonthYear","split","monthName","Error","isoMonth","Time","dateTime","timeValue","className","TimeSpent","fromDate","untilDate","numberOfMoviesWatched","totalDaysSinceFirstMovie","totalDaysSpentWatchingMovies","percentOfTimeSpentWatchingMovies","hoursAndMinutesSpentWatchingMovies","id","MovieRangeList","movieRanges","maxListLength","slice","map","startRange","endRange","key","to","MovieRangeSelector","listOfRanges","movieRangeSearchValue","setMovieRangeSearchValue","searchValue","searchValueInterspersedWithRegex","replace","searchTerm","RegExp","filter","range","startAndEndRange","join","test","movieRangeSearch","onReset","htmlFor","aria-label","type","onFocus","onChange","e","target","value","setTimeout","length","MovieRuntimeSection","timeValueHours","timeValueMinutes","sectionTitle","movieTitle","movieRuntimeHours","movieRuntimeMinutes","title","MovieLength","longestMovie","shortestMovie","movieOfAverageLength","longestMovieTitle","shortestMovieTitle","movieOfAverageLengthTitle","longestMovieRuntime","shortestMovieRuntime","movieOfAverageLengthRuntime","ValuesAndCountsList","listSummary","listHeading","list","index","count","toString","myRatingsSummary","topRating","pluralizedTopRating","List","imdbRatingsComparedToMine","movieAge","topDecade","topActor","topDirector","topGenre","listType","miscSummaryData","topValue","Footer","href","query","MovieRangeData","data","pageContext","movieDateRange","Object","values","postgres","timeSpent","String","numberOfMovies","daysSinceFirstMovie","daysSpentWatching","percentOfTimeSpentWatching","hoursSpentWatching","remainingMinutesSpentWatching","pageTitle","movieDateRanges","movieDate","i","startRangeDate","j","endRangeDate","push","React","useState","movieLength","top10Genres","lists","top10Directors","top10Actors","top10Decades","movieAgePreference","myTopRatings","top10TranslatedImdbRatings","InfoCard","children"],"mappings":"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","file":"component---src-templates-movie-range-data-tsx-9a1096e669be84f8ba45.js","sourcesContent":["import React from 'react';\nimport { FunctionComponent } from 'react';\nimport { ReactElement } from 'react';\nimport InfoCard from './info-card';\n\nconst isoMonth: Function = (monthName: string): string => {\n    // the month name format is the same as in the database\n    switch (monthName) {\n        case 'Jan':\n            return '01';\n        case 'Feb':\n            return '02';\n        case 'Mar':\n            return '03';\n        case 'Apr':\n            return '04';\n        case 'May':\n            return '05';\n        case 'Jun':\n            return '06';\n        case 'Jul':\n            return '07';\n        case 'Aug':\n            return '08';\n        case 'Sep':\n            return '09';\n        case 'Oct':\n            return '10';\n        case 'Nov':\n            return '11';\n        case 'Dec':\n            return '12';\n        default:\n            throw Error(\n                `The format of the month value \"${monthName}\" is incorrect.`\n            );\n    }\n};\n\n// function is meant to work only with dates that follow the format of\n// the \"watched on\" fields from the database\nexport const isoDate: Function = (date: string): string => {\n    const dayMonthYear = date.split(' ');\n\n    const year = dayMonthYear[2];\n    const monthName = dayMonthYear[1];\n    const month = isoMonth(monthName);\n    const day = dayMonthYear[0];\n\n    return `${year}-${month}-${day}`;\n};\n\ninterface TimeProp {\n    dateTime: string;\n    timeValue: string;\n}\n\nexport const Time: FunctionComponent<TimeProp> = ({\n    dateTime,\n    timeValue,\n}: TimeProp): ReactElement => {\n    return (\n        <time dateTime={dateTime} className=\"highlight\">\n            {timeValue}\n        </time>\n    );\n};\n\ninterface TimeSpentProps {\n    // first movie's \"watched on\" date\n    fromDate: string;\n    // last movie's \"watched on\" date\n    untilDate: string;\n    numberOfMoviesWatched: string;\n    totalDaysSinceFirstMovie: string;\n    totalDaysSpentWatchingMovies: string;\n    percentOfTimeSpentWatchingMovies: string;\n    hoursAndMinutesSpentWatchingMovies: [string, string];\n}\n\nconst TimeSpent: FunctionComponent<TimeSpentProps> = ({\n    fromDate,\n    untilDate,\n    numberOfMoviesWatched,\n    totalDaysSinceFirstMovie,\n    totalDaysSpentWatchingMovies,\n    percentOfTimeSpentWatchingMovies,\n    hoursAndMinutesSpentWatchingMovies,\n}: TimeSpentProps): ReactElement => {\n    return (\n        <InfoCard id=\"time-spent\">\n            <section>\n                <p>\n                    <span>From </span>\n                    <Time dateTime={isoDate(fromDate)} timeValue={fromDate} />\n                    <span> until </span>\n                    <Time dateTime={isoDate(untilDate)} timeValue={untilDate} />\n                    <span>, I&apos;ve watched </span>\n                    <strong className=\"highlight\">\n                        {numberOfMoviesWatched} movies\n                    </strong>\n                    <span>.</span>\n                </p>\n            </section>\n            <section className=\"mt-4 pt-4 border-t-2 border-dashed\">\n                <p>\n                    <span>Out of </span>\n                    <Time\n                        dateTime={`${totalDaysSinceFirstMovie}d`}\n                        timeValue={totalDaysSinceFirstMovie}\n                    />\n                    <span> days, I&apos;ve spent </span>\n                    <Time\n                        dateTime={`${totalDaysSpentWatchingMovies}d`}\n                        timeValue={totalDaysSpentWatchingMovies}\n                    />\n                    <span> watching films. That&apos;s </span>\n                    <span className=\"highlight\">\n                        {percentOfTimeSpentWatchingMovies}%\n                    </span>\n                    <span> of my time.</span>\n                </p>\n            </section>\n            <section className=\"mt-4 pt-4 border-t-2 border-dashed\">\n                <h1 className=\"font-bold text-center pb-2\">More precisely</h1>\n                <Time\n                    dateTime={`${hoursAndMinutesSpentWatchingMovies[0]}h`}\n                    timeValue={`${hoursAndMinutesSpentWatchingMovies[0]} hours`}\n                />\n                {hoursAndMinutesSpentWatchingMovies[1] != '0' && (\n                    <>\n                        <span> and </span>\n                        <Time\n                            dateTime={`${hoursAndMinutesSpentWatchingMovies[1]}m`}\n                            timeValue={`\n                                ${hoursAndMinutesSpentWatchingMovies[1]}${\n                                hoursAndMinutesSpentWatchingMovies[1] === '1'\n                                    ? ' minute'\n                                    : ' minutes'\n                            }`}\n                        />\n                    </>\n                )}\n                <span>.</span>\n            </section>\n        </InfoCard>\n    );\n};\n\nexport default TimeSpent;\n","import React from 'react';\nimport { FunctionComponent } from 'react';\nimport { ReactElement } from 'react';\nimport { Link } from 'gatsby';\nimport { isoDate } from './time-spent';\n\nconst MAX_SEARCH_RESULTS = 7;\n\nconst movieRangeSearch = (\n    movieRanges: [string, string][],\n    searchValue: string\n): [string, string][] => {\n    const regexZeroOrMoreOfAnything = '.*';\n\n    const searchValueInterspersedWithRegex = searchValue.replace(\n        /\\s/g,\n        regexZeroOrMoreOfAnything\n    );\n\n    const searchTerm = RegExp(\n        regexZeroOrMoreOfAnything +\n            searchValueInterspersedWithRegex +\n            regexZeroOrMoreOfAnything,\n        'i'\n    );\n\n    return movieRanges.filter((range) => {\n        const startAndEndRange = range.join(' ');\n        const searchTermFoundInRange = searchTerm.test(startAndEndRange);\n\n        if (searchTermFoundInRange) {\n            return range;\n        }\n    });\n};\n\ninterface MovieRangeListProps {\n    movieRanges: [string, string][];\n    maxListLength?: number;\n}\n\nconst MovieRangeList: FunctionComponent<MovieRangeListProps> = ({\n    movieRanges,\n    maxListLength = MAX_SEARCH_RESULTS,\n}: MovieRangeListProps): ReactElement[] => {\n    const truncatedMovieRanges = movieRanges.slice(0, maxListLength);\n\n    return truncatedMovieRanges.map(([startRange, endRange]) => (\n        <li key={startRange + endRange} className=\"my-2\">\n            <Link\n                to={`/${isoDate(startRange)}_until_${isoDate(endRange)}`}\n                className=\"p-2 rounded-sm hover:bg-purple hover:text-gray focus:bg-purple focus:text-gray\"\n            >\n                {`${startRange} - ${endRange}`}\n            </Link>\n        </li>\n    ));\n};\n\ninterface MovieRangeSelectorProps {\n    listOfRanges: [string, string][];\n    movieRangeSearchValue: string;\n    setMovieRangeSearchValue: (searchValue: string) => void;\n}\n\nconst MovieRangeSelector: FunctionComponent<MovieRangeSelectorProps> = ({\n    listOfRanges,\n    movieRangeSearchValue,\n    setMovieRangeSearchValue,\n}: MovieRangeSelectorProps): ReactElement => {\n    const movieRanges = movieRangeSearch(listOfRanges, movieRangeSearchValue);\n\n    return (\n        <form\n            className=\"w-8/12 mx-auto relative text-center\"\n            onReset={() => setMovieRangeSearchValue('')}\n        >\n            <label\n                htmlFor=\"movie-range-search\"\n                className=\"block bg-yellow border-2 border-b-0 text-purple p-1 rounded-t-sm font-bold cursor-pointer\"\n            >\n                Select movie data range\n            </label>\n            <input\n                id=\"movie-range-search\"\n                aria-label=\"search box\"\n                type=\"text\"\n                className=\"w-full p-2 border-2 border-purple\"\n                onFocus={() => {\n                    if (movieRangeSearchValue === '') {\n                        // display the movie range list\n                        setMovieRangeSearchValue(' ');\n                    }\n                }}\n                onChange={(e) => {\n                    const searchValue = e.target.value;\n\n                    setTimeout(() => {\n                        setMovieRangeSearchValue(searchValue);\n                    }, 500);\n                }}\n            />\n            <button\n                type=\"reset\"\n                aria-label=\"clear search box\"\n                className=\"absolute p-2 border-2 border-l-0 border-purple bg-yellow\"\n            >\n                ✕\n            </button>\n            {movieRangeSearchValue != '' && (\n                <ul\n                    aria-label=\"movie-ranges\"\n                    className=\"w-full absolute z-10 text-sm py-2 bg-gray text-purple border-t-0 border-2 border-purple\"\n                >\n                    {movieRanges.length === 0 && <li>No Results</li>}\n                    {movieRanges.length > 0 && (\n                        <MovieRangeList movieRanges={movieRanges} />\n                    )}\n                    {movieRanges.length > MAX_SEARCH_RESULTS && (\n                        <span>and some more</span>\n                    )}\n                    {movieRanges.length < MAX_SEARCH_RESULTS && movieRanges.length > 0 && (\n                        <span>and that&apos;s all</span>\n                    )}\n                </ul>\n            )}\n        </form>\n    );\n};\n\nexport default MovieRangeSelector;\n","import React from 'react';\nimport { FunctionComponent } from 'react';\nimport { ReactElement } from 'react';\nimport InfoCard from './info-card';\nimport { Time } from './time-spent';\n\ninterface MovieRuntimeSectionProps {\n    sectionTitle: 'Longest runtime' | 'Shortest runtime' | 'Average runtime';\n    movieTitle: string;\n    movieRuntimeHours: string;\n    movieRuntimeMinutes: string;\n}\n\nconst MovieRuntimeSection: FunctionComponent<MovieRuntimeSectionProps> = ({\n    sectionTitle,\n    movieTitle,\n    movieRuntimeHours,\n    movieRuntimeMinutes,\n}: MovieRuntimeSectionProps): ReactElement => {\n    let timeValueHours: string;\n    switch (movieRuntimeHours) {\n        case '0':\n            timeValueHours = '0 hours';\n            break;\n        case '1':\n            timeValueHours = '1 hour';\n            break;\n        default:\n            timeValueHours = `${movieRuntimeHours} hours`;\n            break;\n    }\n\n    let timeValueMinutes: string;\n    switch (movieRuntimeMinutes) {\n        case '0':\n            timeValueMinutes = '';\n            break;\n        case '1':\n            timeValueMinutes = ' and 1 minute';\n            break;\n        default:\n            timeValueMinutes = ` and ${movieRuntimeMinutes} minutes`;\n            break;\n    }\n\n    return (\n        <>\n            <h1 className=\"font-bold text-center pb-2\">{sectionTitle}</h1>\n            <Time\n                dateTime={`${movieRuntimeHours}H${movieRuntimeMinutes}M`}\n                timeValue={timeValueHours + timeValueMinutes}\n            />\n            {movieTitle !== '' && (\n                <h2>\n                    <abbr title=\"for example\">e.g.</abbr>\n                    <em> {movieTitle}</em>\n                </h2>\n            )}\n        </>\n    );\n};\n\ntype MovieAndItsRuntime = [string, string];\n\nexport interface MovieLengthProps {\n    longestMovie: MovieAndItsRuntime;\n    shortestMovie: MovieAndItsRuntime;\n    movieOfAverageLength: MovieAndItsRuntime;\n}\n\nconst MovieLength: FunctionComponent<MovieLengthProps> = ({\n    longestMovie,\n    shortestMovie,\n    movieOfAverageLength,\n}: MovieLengthProps): ReactElement => {\n    const longestMovieTitle = longestMovie[0];\n    const shortestMovieTitle = shortestMovie[0];\n    const movieOfAverageLengthTitle = movieOfAverageLength[0];\n\n    const longestMovieRuntime = longestMovie[1].split(':');\n    const shortestMovieRuntime = shortestMovie[1].split(':');\n    const movieOfAverageLengthRuntime = movieOfAverageLength[1].split(':');\n\n    return (\n        <InfoCard id=\"movie-length\">\n            <section className=\"mb-4 pb-4 border-b-2 border-dashed\">\n                <MovieRuntimeSection\n                    sectionTitle=\"Longest runtime\"\n                    movieTitle={longestMovieTitle}\n                    movieRuntimeHours={longestMovieRuntime[0]}\n                    movieRuntimeMinutes={longestMovieRuntime[1]}\n                />\n            </section>\n            <section className=\"mb-4 pb-4 border-b-2 border-dashed\">\n                <MovieRuntimeSection\n                    sectionTitle=\"Shortest runtime\"\n                    movieTitle={shortestMovieTitle}\n                    movieRuntimeHours={shortestMovieRuntime[0]}\n                    movieRuntimeMinutes={shortestMovieRuntime[1]}\n                />\n            </section>\n            <section>\n                <MovieRuntimeSection\n                    sectionTitle=\"Average runtime\"\n                    movieTitle={movieOfAverageLengthTitle}\n                    movieRuntimeHours={movieOfAverageLengthRuntime[0]}\n                    movieRuntimeMinutes={movieOfAverageLengthRuntime[1]}\n                />\n            </section>\n        </InfoCard>\n    );\n};\n\nexport default MovieLength;\n","import React from 'react';\nimport { FunctionComponent } from 'react';\nimport { ReactElement, ReactNode } from 'react';\n\ninterface ValuesAndCountsListProps {\n    listSummary: ReactNode;\n    listHeading: string;\n    list: [string, string][];\n}\n\nconst ValuesAndCountsList: FunctionComponent<ValuesAndCountsListProps> = ({\n    listSummary,\n    listHeading,\n    list,\n}: ValuesAndCountsListProps): ReactElement => {\n    return (\n        <>\n            <div className=\"mb-4 pb-4 border-b-2 border-dashed\">\n                {listSummary}\n            </div>\n            <section>\n                <h1 className=\"font-bold text-center\">{listHeading}</h1>\n                <ul>\n                    {list.map(([value, count], index) => (\n                        <li\n                            key={value + index.toString()}\n                            className=\"py-2 flex justify-between border-b border-dotted\"\n                        >\n                            <em>{value}</em>\n                            <strong>{count}</strong>\n                        </li>\n                    ))}\n                </ul>\n            </section>\n        </>\n    );\n};\n\nexport default ValuesAndCountsList;\n","import React from 'react';\nimport { FunctionComponent } from 'react';\nimport { ReactElement } from 'react';\nimport InfoCard from './info-card';\nimport ValuesAndCountsList from './values-and-counts-list';\n\nconst genreListSummary = (topGenre: string): ReactElement => (\n    <p>\n        <span>I mostly watch </span>\n        <span className=\"highlight\">{topGenre}</span>\n        <span> movies, but I&apos;m open to every genre.</span>\n    </p>\n);\n\nconst directorListSummary = (topDirector: string): ReactElement => (\n    <p>\n        <span className=\"highlight\">{topDirector}</span>\n        <span> stands out as a director.</span>\n    </p>\n);\n\nconst actorListSummary = (topActor: string): ReactElement => (\n    <p>\n        <span>Looks like </span>\n        <span className=\"highlight\">{topActor}</span>\n        <span> is popular.</span>\n    </p>\n);\n\nconst decadeListSummary = (\n    movieAge: string,\n    topDecade: string\n): ReactElement => (\n    <p>\n        <span>I seem to prefer </span>\n        <span className=\"highlight\">{movieAge}</span>\n        <span> movies, from the </span>\n        <span className=\"highlight\">{topDecade}</span>\n        <span>.</span>\n    </p>\n);\n\nconst ratingSystemSummary = (): ReactElement => (\n    <p>\n        <span>I have a </span>\n        <span className=\"highlight\">food inspired</span>\n        <span> rating system.</span>\n    </p>\n);\n\nconst myRatingsSummary = (topRating: string): ReactElement => {\n    let pluralizedTopRating: string;\n    switch (topRating) {\n        case 'Sublime Lettuce':\n            pluralizedTopRating = 'Sublime Lettuces';\n            break;\n        case 'Amazing Savory':\n            pluralizedTopRating = 'Amazing Savories';\n            break;\n        case 'Great Onion':\n            pluralizedTopRating = 'Great Onions';\n            break;\n        case 'Good Tomato':\n            pluralizedTopRating = 'Good Tomatoes';\n            break;\n        case 'Decent Carrot':\n            pluralizedTopRating = 'Decent Carrots';\n            break;\n        case 'Bad Eggplant':\n            pluralizedTopRating = 'Bad Eggplants';\n            break;\n        default:\n            throw Error(`${topRating} is not a valid rating value.`);\n    }\n\n    return (\n        <p>\n            <span>I watch a lot of </span>\n            <span className=\"highlight\">{pluralizedTopRating}</span>\n            <span>.</span>\n        </p>\n    );\n};\n\nconst imdbRatingsSummary = (\n    imdbRatingsComparedToMine: string\n): ReactElement => (\n    <p>\n        <span>Compared to me, IMDb users give movies </span>\n        <span className=\"highlight\">{imdbRatingsComparedToMine}</span>\n        <span> ratings.</span>\n    </p>\n);\n\ninterface ListProps {\n    listType:\n        | 'genres'\n        | 'directors'\n        | 'actors'\n        | 'decades'\n        | 'rating system'\n        | 'my ratings'\n        | 'imdb ratings';\n    list: [string, string][];\n    miscSummaryData?: string;\n}\n\nconst List: FunctionComponent<ListProps> = ({\n    listType,\n    list,\n    miscSummaryData = '',\n}: ListProps): ReactElement | null => {\n    const topValue = list[0][0];\n\n    switch (listType) {\n        case 'genres':\n            return (\n                <InfoCard id=\"movie-genres\">\n                    <ValuesAndCountsList\n                        listSummary={genreListSummary(topValue)}\n                        listHeading=\"Number of movies per genre\"\n                        list={list}\n                    />\n                </InfoCard>\n            );\n        case 'directors':\n            return (\n                <InfoCard id=\"movie-directors\">\n                    <ValuesAndCountsList\n                        listSummary={directorListSummary(topValue)}\n                        listHeading=\"Number of movies directed by\"\n                        list={list}\n                    />\n                </InfoCard>\n            );\n        case 'actors':\n            return (\n                <InfoCard id=\"movie-actors\">\n                    <ValuesAndCountsList\n                        listSummary={actorListSummary(topValue)}\n                        listHeading=\"Number of movies starring\"\n                        list={list}\n                    />\n                </InfoCard>\n            );\n        case 'decades':\n            return (\n                <InfoCard id=\"movie-decades\">\n                    <ValuesAndCountsList\n                        listSummary={decadeListSummary(\n                            miscSummaryData,\n                            topValue\n                        )}\n                        listHeading=\"Number of movies per decade\"\n                        list={list}\n                    />\n                </InfoCard>\n            );\n        case 'rating system':\n            return (\n                <InfoCard id=\"movie-rating-system\">\n                    <ValuesAndCountsList\n                        listSummary={ratingSystemSummary()}\n                        listHeading=\"My ratings compared to IMDb stars\"\n                        list={list}\n                    />\n                </InfoCard>\n            );\n        case 'my ratings':\n            return (\n                <InfoCard id=\"my-ratings\">\n                    <ValuesAndCountsList\n                        listSummary={myRatingsSummary(topValue)}\n                        listHeading=\"Number of movies per my rating system\"\n                        list={list}\n                    />\n                </InfoCard>\n            );\n        case 'imdb ratings':\n            return (\n                <InfoCard id=\"imdb-ratings\">\n                    <ValuesAndCountsList\n                        listSummary={imdbRatingsSummary(miscSummaryData)}\n                        listHeading=\"Number of movies per IMDb rating (translated to my rating system)\"\n                        list={list}\n                    />\n                </InfoCard>\n            );\n        default:\n            return null;\n    }\n};\n\nexport default List;\n","import React from 'react';\nimport { FunctionComponent } from 'react';\nimport { ReactElement } from 'react';\n\nconst Footer: FunctionComponent = (): ReactElement => {\n    return (\n        <footer className=\"mx-auto text-center mb-5\">\n            <h1 className=\"font-bold\">Contact</h1>\n            <ul>\n                <li>\n                    <a\n                        className=\"inline-block my-1 bg-purple text-gray p-2 rounded-sm\"\n                        href=\"mailto:jc@jagdcake.com\"\n                    >\n                        jc@jagdcake.com\n                    </a>\n                </li>\n                <li>\n                    <a\n                        className=\"inline-block my-1 bg-purple text-gray p-2 rounded-sm\"\n                        href=\"https://github.com/JagdCake/movie-data\"\n                    >\n                        GitHub repository\n                    </a>\n                </li>\n            </ul>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { FunctionComponent } from 'react';\nimport { ReactElement } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport TimeSpent from '../components/time-spent';\nimport MovieRangeSelector from '../components/movie-range-selector';\nimport MovieLength from '../components/movie-length';\nimport { MovieLengthProps } from '../components/movie-length';\nimport List from '../components/list';\nimport Footer from '../components/footer';\n\nexport const query = graphql`\n    query($movieDateRange: [String]!) {\n        postgres {\n            timeSpent: movieById(id: 1) {\n                numberOfMovies: numberOfMoviesInTheRange(\n                    movieDateRange: $movieDateRange\n                )\n                daysSinceFirstMovie: daysSinceFirstMovieInTheRange(\n                    movieDateRange: $movieDateRange\n                )\n                daysSpentWatching: daysSpentWatchingMoviesInTheRange(\n                    movieDateRange: $movieDateRange\n                )\n                percentOfTimeSpentWatching: percentOfTimeSpentWatchingMoviesInTheRange(\n                    movieDateRange: $movieDateRange\n                )\n                hoursSpentWatching: hoursSpentWatchingMoviesInTheRange(\n                    movieDateRange: $movieDateRange\n                )\n                remainingMinutesSpentWatching: remainingMinutesSpentWatchingMoviesInTheRange(\n                    movieDateRange: $movieDateRange\n                )\n            }\n            movieLength: movieById(id: 1) {\n                longestMovie: runtimeAndTitleOfMovieOfSpecificLengthInTheRang(\n                    movieDateRange: $movieDateRange\n                    movieLength: \"longest\"\n                )\n                shortestMovie: runtimeAndTitleOfMovieOfSpecificLengthInTheRang(\n                    movieDateRange: $movieDateRange\n                    movieLength: \"shortest\"\n                )\n                movieOfAverageLength: runtimeAndTitleOfMovieOfSpecificLengthInTheRang(\n                    movieDateRange: $movieDateRange\n                    movieLength: \"average\"\n                )\n            }\n            lists: movieById(id: 1) {\n                top10Genres: genresOrRatingsAndTheirCountsInTheRange(\n                    movieDateRange: $movieDateRange\n                    genreOrRating: \"genre\"\n                    numberOfValues: 10\n                )\n                top10Directors: namesAndCountsOfPrincipalsInTheRange(\n                    movieDateRange: $movieDateRange\n                    principals: \"directors\"\n                    numberOfNames: 10\n                )\n                top10Actors: namesAndCountsOfPrincipalsInTheRange(\n                    movieDateRange: $movieDateRange\n                    principals: \"actors\"\n                    numberOfNames: 10\n                )\n                top10Decades: numberOfMoviesPerDecadeInTheRange(\n                    movieDateRange: $movieDateRange\n                    numberOfValues: 10\n                )\n                movieAgePreference: movieAgePreferenceInTheRange(\n                    movieDateRange: $movieDateRange\n                )\n                myTopRatings: genresOrRatingsAndTheirCountsInTheRange(\n                    movieDateRange: $movieDateRange\n                    genreOrRating: \"rating\"\n                    numberOfValues: 6\n                )\n                imdbRatingsComparedToMine: imdbRatingsScoreComparedToMine(\n                    movieDateRange: $movieDateRange\n                )\n                top10TranslatedImdbRatings: numberOfMoviesPerTranslatedImdbRatingInTheRange(\n                    movieDateRange: $movieDateRange\n                    numberOfValues: 10\n                )\n            }\n        }\n    }\n`;\n\ninterface TimeSpentData {\n    numberOfMovies: number;\n    daysSinceFirstMovie: number;\n    daysSpentWatching: number;\n    percentOfTimeSpentWatching: number;\n    hoursSpentWatching: number;\n    remainingMinutesSpentWatching: number;\n}\n\ninterface MovieRangeDataProps {\n    data: {\n        postgres: {\n            timeSpent: TimeSpentData;\n            movieLength: MovieLengthProps;\n            lists: {\n                top10Genres: [string, string][];\n                top10Directors: [string, string][];\n                top10Actors: [string, string][];\n                top10Decades: [string, string][];\n                movieAgePreference: string;\n                myTopRatings: [string, string][];\n                imdbRatingsComparedToMine: string;\n                top10TranslatedImdbRatings: [string, string][];\n            };\n        };\n    };\n    pageContext: {\n        movieDateRange: string[];\n        movieDateRanges: string[];\n    };\n}\n\nconst MovieRangeData: FunctionComponent<MovieRangeDataProps> = ({\n    data,\n    pageContext,\n}: MovieRangeDataProps): ReactElement => {\n    const fromDate = pageContext.movieDateRange[0];\n    const untilDate = pageContext.movieDateRange[1];\n    const [\n        numberOfMovies,\n        daysSinceFirstMovie,\n        daysSpentWatching,\n        percentOfTimeSpentWatching,\n        hoursSpentWatching,\n        remainingMinutesSpentWatching,\n    ] = Object.values(data.postgres.timeSpent).map((value) => {\n        return String(value);\n    });\n\n    const pageTitle = ` from ${fromDate} until ${untilDate}`;\n\n    const listOfRanges: [string, string][] = [];\n    pageContext.movieDateRanges.map((movieDate, i, movieDateRanges) => {\n        const startRangeDate = movieDate;\n\n        for (let j = i + 1; j < movieDateRanges.length; j++) {\n            const endRangeDate = movieDateRanges[j];\n\n            listOfRanges.push([startRangeDate, endRangeDate]);\n        }\n    });\n\n    const [searchValue, setMovieRangeSearchValue] = React.useState('');\n\n    const {\n        longestMovie,\n        shortestMovie,\n        movieOfAverageLength,\n    } = data.postgres.movieLength;\n\n    const top10Genres = data.postgres.lists.top10Genres;\n    const top10Directors = data.postgres.lists.top10Directors;\n    const top10Actors = data.postgres.lists.top10Actors;\n    const top10Decades = data.postgres.lists.top10Decades;\n    const movieAgePreference = data.postgres.lists.movieAgePreference;\n    const myRatingSystem: [string, string][] = [\n        ['Sublime Lettuce', '9–10'],\n        ['Amazing Savory', '7.9–8.9'],\n        ['Great Onion', '6–7.8'],\n        ['Good Tomato', '5–5.9'],\n        ['Decent Carrot', '4–4.9'],\n        ['Bad Eggplant', '1–3.9'],\n    ];\n    const myTopRatings = data.postgres.lists.myTopRatings;\n    const imdbRatingsComparedToMine =\n        data.postgres.lists.imdbRatingsComparedToMine;\n    const top10TranslatedImdbRatings =\n        data.postgres.lists.top10TranslatedImdbRatings;\n\n    return (\n        <Layout>\n            <SEO title={pageTitle} />\n            <MovieRangeSelector\n                listOfRanges={listOfRanges}\n                movieRangeSearchValue={searchValue}\n                setMovieRangeSearchValue={setMovieRangeSearchValue}\n            />\n            <TimeSpent\n                fromDate={fromDate}\n                untilDate={untilDate}\n                numberOfMoviesWatched={numberOfMovies}\n                totalDaysSinceFirstMovie={daysSinceFirstMovie}\n                totalDaysSpentWatchingMovies={daysSpentWatching}\n                percentOfTimeSpentWatchingMovies={percentOfTimeSpentWatching}\n                hoursAndMinutesSpentWatchingMovies={[\n                    hoursSpentWatching,\n                    remainingMinutesSpentWatching,\n                ]}\n            />\n            <MovieLength\n                longestMovie={longestMovie}\n                shortestMovie={shortestMovie}\n                movieOfAverageLength={movieOfAverageLength}\n            />\n            <List listType=\"genres\" list={top10Genres} />\n            <List listType=\"directors\" list={top10Directors} />\n            <List listType=\"actors\" list={top10Actors} />\n            <List\n                listType=\"decades\"\n                list={top10Decades}\n                miscSummaryData={movieAgePreference}\n            />\n            <List listType=\"rating system\" list={myRatingSystem} />\n            <List listType=\"my ratings\" list={myTopRatings} />\n            <List\n                listType=\"imdb ratings\"\n                list={top10TranslatedImdbRatings}\n                miscSummaryData={imdbRatingsComparedToMine}\n            />\n            <Footer />\n        </Layout>\n    );\n};\n\nexport default MovieRangeData;\n","import React from 'react';\nimport { ReactNode } from 'react';\nimport { FunctionComponent } from 'react';\nimport { ReactElement } from 'react';\n\ninterface InfoCardProps {\n    children: ReactNode;\n    id: string;\n}\n\nconst InfoCard: FunctionComponent<InfoCardProps> = ({\n    children,\n    id,\n}: InfoCardProps): ReactElement => {\n    return (\n        <article\n            id={id}\n            aria-label=\"Info card\"\n            className=\"border-2 border-purple rounded-sm px-3 pb-6 text-lg shadow-lg my-8\"\n        >\n            <a href={`#${id}`} className=\"card-link\"></a>\n            {children}\n        </article>\n    );\n};\n\nexport default InfoCard;\n"],"sourceRoot":""}